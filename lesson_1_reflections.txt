How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    viewing two versions helped me visually comare the differences and spot errors

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    able to track changes without laborious effort

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Manual Commit Pros: makes you be very practical coder. you learn to understand value of version control.
    Manual Commit Cons: if you are inexperienced coder and forget to commit and your system crashes then you are left out in a cold.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    other files may serve as dependecies for that code to work in unisom in an application.
    because of their functionality

How can you use the commands git log and git diff to view the history of files?

    i can use commands git log and git diff to view history of files by comparing changes made 

How might using version control make you more confident to make changes that
could break something?

    i can always compare if the results are not desirable or behaviour changes to worst  significant changes withou fear. i can rethink and explore.

Now that you have your workspace set up, what do you want to try using Git for?

    my udacity coources, of course, hahahah

    *********************

when using git make sure you commit per logical change 

Checking out an earlier commit will change the state of at least one file.

This is sometimes true. Git doesn't allow you to save a new commit if no files have been updated, so you might think this is always true. However, it's possible to do the following:

Save a commit (call this commit 1).
Update some files and save another commit (call this commit 2).
Change all the files back to their state during commit 1, then save again (call this commit 3).
This sometimes happens if commit 2 contained a bug, and it's important to fix the bug quickly. The easiest thing to do might be to remove all the changes introduced by commit 2 to fix the bug, then figure out how to safely reintroduce the changes later.

At this point, commit 3 is the latest commit, so if you checkout commit 1, none of the files will be changed. 


Checking out an earlier commit will change the state of more than one file.

Checking out an earlier commit will change the state of every file in the repository.

Both of these are sometimes true. Since each commit tracks the state of all files in the repository, it is possible that checking out an earlier commit will change the state of multiple files, or even all the files in the repository. However, it is possible to save a new commit after changing only one file, so it is possible only one file will change. 


After checking out a commit, the state of all the files in the repository will be from the same point in time.

This is always true. A commit saves a snapshot of all files in the repository at the time the commit was made, so checking out an earlier commit will result in all the files being reverted to their state at the time the commit was made. That is, the files will be in a consistent state.


   